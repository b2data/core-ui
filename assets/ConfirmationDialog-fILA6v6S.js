import{j as e,R as v,r as o}from"./iframe-BjsjcTCH.js";import{T as u}from"./TextField-DXJ3l7BH.js";import{D as g}from"./Dialog-o0bHGwIv.js";import{I as x}from"./IconButton-5vGrSHtF.js";import{c as C}from"./createSvgIcon-BWDMKnaQ.js";const w=C(e.jsx("path",{d:"M18 2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m0 14H9V4h9zM3 15v-2h2v2zm0-5.5h2v2H3zM10 20h2v2h-2zm-7-1.5v-2h2v2zM5 22c-1.1 0-2-.9-2-2h2zm3.5 0h-2v-2h2zm5 0v-2h2c0 1.1-.9 2-2 2M5 6v2H3c0-1.1.9-2 2-2"})),p=v.forwardRef(({acceptBtn:t,declineBtn:a,confirmProps:n,onClose:i,content:m,children:h,open:s,...f},b)=>{const[d,c]=o.useState(""),l=o.useRef(null);o.useEffect(()=>{c("")},[s]);const y=()=>{navigator.clipboard?navigator.clipboard.writeText(n?.value||""):l.current&&(l.current.select(),document.execCommand("copy"))};return e.jsxs(g,{ref:b,open:s,onClose:i,...f,actions:[...a?[{variant:"outlined",color:"default",...a,children:a.label||a.children,onClick:i}]:[],...t?[{variant:"contained",color:"primary",...t,children:t.label||t.children,disabled:t.disabled||n&&d!==n.value}]:[]],children:[m||h,n&&e.jsxs(e.Fragment,{children:[e.jsx(u,{readOnly:!0,variant:"outlined",margin:"normal",value:n.value,inputRef:l,endAdornment:e.jsx(x,{size:"small",onClick:y,children:e.jsx(w,{})}),sx:{mt:4}}),e.jsx(u,{variant:"outlined",placeholder:n.placeholder,helperText:n.helperText,onChange:r=>c(r.target.value),onKeyDown:r=>{r.code==="Enter"&&t?.onClick?.(null)},value:d,autoComplete:"off",autoFocus:!0})]})]})});try{p.displayName="ConfirmationDialog",p.__docgenInfo={description:"",displayName:"ConfirmationDialog",props:{title:{defaultValue:null,description:"Title of the Dialog, will be wrapped by `DialogTitle`",name:"title",required:!0,type:{name:"string"}},content:{defaultValue:null,description:"Use `content` or `children` to privide dialog content",name:"content",required:!1,type:{name:"string | ReactElement<unknown, string | JSXElementConstructor<any>>"}},acceptBtn:{defaultValue:null,description:"Accept button props inherit `ButtonProps`.<br>\nThe properties `disabled` will be overriden.\nSpecify text content by `label` property.",name:"acceptBtn",required:!0,type:{name:"ButtonProps & { label: string; }"}},declineBtn:{defaultValue:null,description:"Accept button props inherit `ButtonProps`.<br>\nThe property `onClick` will be overriden by `onClose`.\nSpecify text content by `label` property.",name:"declineBtn",required:!0,type:{name:"ButtonProps & { label: string; }"}},confirmProps:{defaultValue:null,description:"Include confirmation TextField for checking some text before submition.<br>\n`value` - The text that should be entered for submition.<br>\n`helperText` - Helper text message under text field.<br>\n`placeholder` - The placeholder for `name` textfield",name:"confirmProps",required:!1,type:{name:"{ value: string; helperText?: string; placeholder?: string; } | undefined"}},children:{defaultValue:null,description:"Dialog children, will be wrapped by `DialogContent`. Use `disablePadding` to remove padding.",name:"children",required:!1,type:{name:"ReactNode"}},onClose:{defaultValue:null,description:'Callback fired when the component requests to be closed.\n@param event The event source of the callback.\n@param reason Can be: `"escapeKeyDown"`, `"backdropClick"`.',name:"onClose",required:!1,type:{name:'((event: {}, reason: "backdropClick" | "escapeKeyDown") => void)'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},maxWidth:{defaultValue:{value:"tablet"},description:"Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.\nVariants: `desktop`, `tablet`, `mobile`.",name:"maxWidth",required:!1,type:{name:"false | Breakpoint"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!0,type:{name:"boolean"}}}}}catch{}export{p as C};
