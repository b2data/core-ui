import{R as n,j as i}from"./iframe-BjsjcTCH.js";import{C as r}from"./Chip-Dh_o-OzT.js";import{D as o}from"./KeyboardArrowRight-DoBAB0im.js";const l=n.forwardRef((e,a)=>i.jsx(r,{ref:a,...e}));try{l.displayName="Chip",l.__docgenInfo={description:"",displayName:"Chip",props:{disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},color:{defaultValue:{value:"default"},description:"The color of the component.",name:"color",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"info"'},{value:'"warning"'},{value:'"error"'},{value:'"default"'},{value:'"primary"'},{value:'"secondary"'}]}},size:{defaultValue:{value:"medium"},description:"The size of the component.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'}]}},variant:{defaultValue:{value:"filled"},description:"The variant to use.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"filled"'},{value:'"outlined"'}]}},icon:{defaultValue:null,description:"Icon element.",name:"icon",required:!1,type:{name:"ReactElement<unknown, string | JSXElementConstructor<any>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},label:{defaultValue:null,description:"The content of the component.",name:"label",required:!1,type:{name:"ReactNode"}},avatar:{defaultValue:null,description:"The Avatar element to display.",name:"avatar",required:!1,type:{name:"ReactElement<unknown, string | JSXElementConstructor<any>>"}},clickable:{defaultValue:null,description:`If \`true\`, the chip will appear clickable, and will raise when pressed,
even if the onClick prop is not defined.
If \`false\`, the chip will not appear clickable, even if onClick prop is defined.
This can be used, for example,
along with the component prop to indicate an anchor Chip is clickable.
Note: this controls the UI and does not affect the onClick event.`,name:"clickable",required:!1,type:{name:"boolean"}},deleteIcon:{defaultValue:null,description:"Override the default delete icon element. Shown only if `onDelete` is set.",name:"deleteIcon",required:!1,type:{name:"ReactElement<unknown, string | JSXElementConstructor<any>>"}},onDelete:{defaultValue:null,description:`Callback fired when the delete icon is clicked.
If set, the delete icon will be shown.`,name:"onDelete",required:!1,type:{name:"((event: any) => void)"}}}}}catch{}const t=n.forwardRef((e,a)=>i.jsx(o,{ref:a,...e}));try{t.displayName="Divider",t.__docgenInfo={description:"",displayName:"Divider",props:{orientation:{defaultValue:{value:"horizontal"},description:"The component orientation.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},textAlign:{defaultValue:{value:"center"},description:"The text alignment.",name:"textAlign",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},variant:{defaultValue:{value:"fullWidth"},description:"The variant to use.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"inset"'},{value:'"fullWidth"'},{value:'"middle"'}]}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},light:{defaultValue:{value:"false"},description:"If `true`, the divider will have a lighter color.\n@deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"light",required:!1,type:{name:"boolean"}},absolute:{defaultValue:{value:"false"},description:"Absolutely position the element.",name:"absolute",required:!1,type:{name:"boolean"}},flexItem:{defaultValue:{value:"false"},description:"If `true`, a vertical divider will have the correct height when used in flex container.\n(By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)",name:"flexItem",required:!1,type:{name:"boolean"}}}}}catch{}export{l as C,t as D};
