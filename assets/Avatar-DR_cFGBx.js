import{j as m,r as y,u as N,c as j,F as A}from"./iframe-BjsjcTCH.js";import{s as c,c as z}from"./styled-B_VYI8z9.js";import{m as U}from"./memoTheme-BkiB6XT-.js";import{c as _}from"./createSvgIcon-BWDMKnaQ.js";import{g as D}from"./generateUtilityClasses-DDbjFgb8.js";import{g as E}from"./generateUtilityClass-BtcU_pBl.js";import{u as h}from"./useSlot-_7UiI0BH.js";const L=_(m.jsx("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}));function O(e){return E("MuiAvatar",e)}const te=D("MuiAvatar",["root","colorDefault","circular","rounded","square","img","fallback"]),H=e=>{const{classes:a,variant:t,colorDefault:r}=e;return z({root:["root",t,r&&"colorDefault"],img:["img"],fallback:["fallback"]},O,a)},B=c("div",{name:"MuiAvatar",slot:"Root",overridesResolver:(e,a)=>{const{ownerState:t}=e;return[a.root,a[t.variant],t.colorDefault&&a.colorDefault]}})(U(({theme:e})=>({position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none",variants:[{props:{variant:"rounded"},style:{borderRadius:(e.vars||e).shape.borderRadius}},{props:{variant:"square"},style:{borderRadius:0}},{props:{colorDefault:!0},style:{color:(e.vars||e).palette.background.default,...e.vars?{backgroundColor:e.vars.palette.Avatar.defaultBg}:{backgroundColor:e.palette.grey[400],...e.applyStyles("dark",{backgroundColor:e.palette.grey[600]})}}}]}))),W=c("img",{name:"MuiAvatar",slot:"Img"})({width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4}),Z=c(L,{name:"MuiAvatar",slot:"Fallback"})({width:"75%",height:"75%"});function $({crossOrigin:e,referrerPolicy:a,src:t,srcSet:r}){const[i,o]=y.useState(!1);return y.useEffect(()=>{if(!t&&!r)return;o(!1);let d=!0;const s=new Image;return s.onload=()=>{d&&o("loaded")},s.onerror=()=>{d&&o("error")},s.crossOrigin=e,s.referrerPolicy=a,s.src=t,r&&(s.srcset=r),()=>{d=!1}},[e,a,t,r]),i}const G=y.forwardRef(function(a,t){const r=N({props:a,name:"MuiAvatar"}),{alt:i,children:o,className:d,component:s="div",slots:p={},slotProps:n={},imgProps:b,sizes:T,src:f,srcSet:g,variant:w="circular",...q}=r;let u=null;const l={...r,component:s,variant:w},k=$({...b,...typeof n.img=="function"?n.img(l):n.img,src:f,srcSet:g}),S=f||g,P=S&&k!=="error";l.colorDefault=!P,delete l.ownerState;const v=H(l),[I,V]=h("root",{ref:t,className:j(v.root,d),elementType:B,externalForwardedProps:{slots:p,slotProps:n,component:s,...q},ownerState:l}),[C,R]=h("img",{className:v.img,elementType:W,externalForwardedProps:{slots:p,slotProps:{img:{...b,...n.img}}},additionalProps:{alt:i,src:f,srcSet:g,sizes:T},ownerState:l}),[F,M]=h("fallback",{className:v.fallback,elementType:Z,externalForwardedProps:{slots:p,slotProps:n},shouldForwardComponentProp:!0,ownerState:l});return P?u=m.jsx(C,{...R}):o||o===0?u=o:S&&i?u=i[0]:u=m.jsx(F,{...M}),m.jsx(I,{...V,children:u})}),x=c(G)(({size:e="medium"})=>({width:A[e],height:A[e],fontSize:e==="small"?18:24}));try{x.displayName="Avatar",x.__docgenInfo={description:"",displayName:"Avatar",props:{alt:{defaultValue:null,description:"Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.\nUsed in combination with `src` to provide an alt attribute for the rendered img element.",name:"alt",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Used to render icon or text elements inside the Avatar if `src` is not set.\nThis can be an element, or just a string.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"(Partial<AvatarClasses> & Partial<ClassNameMap<never>>)"}},imgProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/img#attributes) applied to the `img` element if the component is used to display an image.\nIt can be used to listen for the loading error event.\n@deprecated Use `slotProps.img` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"imgProps",required:!1,type:{name:"(ImgHTMLAttributes<HTMLImageElement> & { sx?: SxProps<Theme>; })"}},sizes:{defaultValue:null,description:"The `sizes` attribute for the `img` element.",name:"sizes",required:!1,type:{name:"string"}},src:{defaultValue:null,description:"The `src` attribute for the `img` element.",name:"src",required:!1,type:{name:"string"}},srcSet:{defaultValue:null,description:"The `srcSet` attribute for the `img` element.\nUse this attribute for responsive image display.",name:"srcSet",required:!1,type:{name:"string"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},variant:{defaultValue:{value:`'circular'
circular`},description:"The shape of the avatar.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"square"'},{value:'"circular"'},{value:'"rounded"'}]}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<AvatarSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ root?: SlotProps<"div", AvatarRootSlotPropsOverrides, AvatarOwnProps>; img?: SlotProps<"img", AvatarImgSlotPropsOverrides, AvatarOwnProps>; fallback?: SlotProps<...> | undefined; } | undefined'}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},size:{defaultValue:{value:"medium"},description:"The size of the avatar.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}}}}}catch{}export{x as A,G as a,te as b};
