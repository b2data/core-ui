import{R as n,j as a}from"./iframe-BjsjcTCH.js";import{a as r}from"./Popover-DdIWv69b.js";const o=n.forwardRef((e,t)=>a.jsx(r,{ref:t,...e}));try{o.displayName="Popover",o.__docgenInfo={description:"",displayName:"Popover",props:{anchorOrigin:{defaultValue:{value:"{ vertical: 'top', horizontal: 'left' }"},description:`This is the point on the anchor where the popover's anchorEl will attach to.
This is not used when the anchorReference is 'anchorPosition'.
Options: vertical: [top, center, bottom]; horizontal: [left, center, right].`,name:"anchorOrigin",required:!1,type:{name:"PopoverOrigin"}},anchorPosition:{defaultValue:null,description:"This is the position that may be used to set the position of the popover.\nThe coordinates are relative to the application's client area.\nType: `{ top: 0 left: 0 }`",name:"anchorPosition",required:!1,type:{name:"PopoverPosition"}},transformOrigin:{defaultValue:{value:"{ vertical: 'top', horizontal: 'left' }"},description:`This is the point on the popover which will attach to the anchor's origin.
Options: vertical: [top, center, bottom, x(px)]; horizontal: [left, center, right, x(px)].`,name:"transformOrigin",required:!1,type:{name:"PopoverOrigin"}},onClose:{defaultValue:null,description:"Callback fired when the component requests to be closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",name:"onClose",required:!1,type:{name:'((event: {}, reason: "backdropClick" | "escapeKeyDown") => void)'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},elevation:{defaultValue:{value:"8"},description:"The elevation of the popover.",name:"elevation",required:!1,type:{name:"number"}},container:{defaultValue:null,description:"An HTML element, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\n\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time.",name:"container",required:!1,type:{name:"Element | (() => Element | null) | null"}},disablePortal:{defaultValue:{value:"false"},description:"The `children` will be under the DOM hierarchy of the parent component.",name:"disablePortal",required:!1,type:{name:"boolean"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!0,type:{name:"boolean"}},anchorEl:{defaultValue:null,description:`An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
or a function that returns either.
It's used to set the position of the popover.`,name:"anchorEl",required:!1,type:{name:"Element | PopoverVirtualElement | (() => Element | PopoverVirtualElement | null) | null"}},keepMounted:{defaultValue:{value:"false"},description:`Always keep the children in the DOM.
This prop can be useful in SEO situation or
when you want to maximize the responsiveness of the Modal.`,name:"keepMounted",required:!1,type:{name:"boolean"}},disableScrollLock:{defaultValue:{value:"false"},description:"Disable the scroll lock behavior.",name:"disableScrollLock",required:!1,type:{name:"boolean"}},anchorReference:{defaultValue:{value:"'anchorEl'"},description:`This determines which anchor prop to refer to when setting
the position of the popover.`,name:"anchorReference",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"anchorEl"'},{value:'"anchorPosition"'}]}}}}}catch{}export{o as P};
