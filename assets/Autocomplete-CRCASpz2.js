import{r as y,k as Nt,u as zt,j as u,c as lt,a as $t,R as Lt}from"./iframe-BjsjcTCH.js";import{c as Rt}from"./createSvgIcon-BWDMKnaQ.js";import{m as Mt,p as jt}from"./Typography-CsaR6tVH.js";import{a as Bt,L as Ot}from"./ListItem-yudmKKA9.js";import{P as Ut}from"./Paper-DAY6tLhN.js";import{T as _t}from"./TextField-DXJ3l7BH.js";import{C as Ht}from"./CircularProgress-C0zgGV6I.js";import{A as Wt,f as xe,o as Tt,i as it,a as wt}from"./TextField-B0qT-cvg.js";import{i as pe}from"./InputBase-CPiPdEi_.js";import{C as Gt}from"./Close-DvCmWYxP.js";import{m as Ie}from"./memoTheme-BkiB6XT-.js";import{g as Kt}from"./generateUtilityClasses-DDbjFgb8.js";import{g as Yt}from"./generateUtilityClass-BtcU_pBl.js";import{u as st}from"./useSlot-_7UiI0BH.js";import{u as ut}from"./useControlled-U77RKmuN.js";import{u as _e}from"./useEventCallback-Cx1VukeI.js";import{s as Jt}from"./Portal-_D9UOzoy.js";import{s as j,c as Qt}from"./styled-B_VYI8z9.js";import{P as Et}from"./Paper-CztJE2D3.js";import{P as Ft}from"./Popper-BVnajaSs.js";import{C as Xt}from"./Chip-Dh_o-OzT.js";import{I as Dt}from"./IconButton-CzfJHRHW.js";import{L as Zt}from"./ListSubheader-CCQRp570.js";const en=n=>{const s=y.useRef({});return y.useEffect(()=>{s.current=n}),s.current};function Pt({array1:n,array2:s,parser:m=c=>c}){return n&&s&&n.length===s.length&&n.every((c,g)=>m(c)===m(s[g]))}function Ct(n){return n.normalize("NFD").replace(/[\u0300-\u036f]/g,"")}function tn(n={}){const{ignoreAccents:s=!0,ignoreCase:m=!0,limit:c,matchFrom:g="any",stringify:F,trim:R=!1}=n;return(k,{inputValue:I,getOptionLabel:v})=>{let V=R?I.trim():I;m&&(V=V.toLowerCase()),s&&(V=Ct(V));const U=V?k.filter(J=>{let A=(F||v)(J);return m&&(A=A.toLowerCase()),s&&(A=Ct(A)),g==="start"?A.startsWith(V):A.includes(V)}):k;return typeof c=="number"?U.slice(0,c):U}}const nn=tn(),Vt=5,on=n=>n.current!==null&&n.current.parentElement?.contains(document.activeElement),an=[];function At(n,s,m,c){if(s||n==null||c)return"";const g=m(n);return typeof g=="string"?g:""}function rn(n){const{unstable_isActiveElementInListbox:s=on,unstable_classNamePrefix:m="Mui",autoComplete:c=!1,autoHighlight:g=!1,autoSelect:F=!1,blurOnSelect:R=!1,clearOnBlur:k=!n.freeSolo,clearOnEscape:I=!1,componentName:v="useAutocomplete",defaultValue:V=n.multiple?an:null,disableClearable:U=!1,disableCloseOnSelect:J=!1,disabled:A,disabledItemsFocusable:de=!1,disableListWrap:ce=!1,filterOptions:fe=nn,filterSelectedOptions:oe=!1,freeSolo:me=!1,getOptionDisabled:B,getOptionKey:dt,getOptionLabel:He=t=>t.label??t,groupBy:ae,handleHomeEndKeys:We=!n.freeSolo,id:ct,includeInputInList:Oe=!1,inputValue:$e,isOptionEqualToValue:re=(t,e)=>t===e,multiple:p=!1,onChange:Ge,onClose:Ke,onHighlightChange:Le,onInputChange:Q,onOpen:Re,open:ft,openOnFocus:mt=!1,options:ht,readOnly:_=!1,renderValue:S,selectOnFocus:Ye=!n.freeSolo,value:Ee}=n,$=Nt(ct);let O=He;O=t=>{const e=He(t);return typeof e!="string"?String(e):e};const Te=y.useRef(!1),we=y.useRef(!0),P=y.useRef(null),E=y.useRef(null),[Pe,gt]=y.useState(null),[L,Fe]=y.useState(-1),Je=g?0:-1,C=y.useRef(Je),bt=y.useRef(At(V??Ee,p,O)).current,[r,Ce]=ut({controlled:Ee,default:V,name:v}),[f,le]=ut({controlled:$e,default:bt,name:v,state:"inputValue"}),[he,De]=y.useState(!1),ge=y.useCallback((t,e,o)=>{if(!(p?r.length<e.length:e!==null)&&!k)return;const l=At(e,p,O,S);f!==l&&(le(l),Q&&Q(t,l,o))},[O,f,p,Q,le,k,r,S]),[H,ie]=ut({controlled:ft,default:!1,name:v,state:"open"}),[yt,be]=y.useState(!0),Ne=!p&&r!=null&&f===O(r),q=H&&!_,h=q?fe(ht.filter(t=>!(oe&&(p?r:[r]).some(e=>e!==null&&re(t,e)))),{inputValue:Ne&&yt?"":f,getOptionLabel:O}):[],D=en({filteredOptions:h,value:r,inputValue:f});y.useEffect(()=>{const t=r!==D.value;he&&!t||me&&!t||ge(null,r,"reset")},[r,ge,he,D.value,me]);const ze=H&&h.length>0&&!_,N=_e(t=>{if(t===-1)P.current.focus();else{const e=S?"data-item-index":"data-tag-index";Pe.querySelector(`[${e}="${t}"]`).focus()}});y.useEffect(()=>{p&&L>r.length-1&&(Fe(-1),N(-1))},[r,p,L,N]);function Qe(t,e){if(!E.current||t<0||t>=h.length)return-1;let o=t;for(;;){const a=E.current.querySelector(`[data-option-index="${o}"]`),l=de?!1:!a||a.disabled||a.getAttribute("aria-disabled")==="true";if(a&&a.hasAttribute("tabindex")&&!l)return o;if(e==="next"?o=(o+1)%h.length:o=(o-1+h.length)%h.length,o===t)return-1}}const W=_e(({event:t,index:e,reason:o})=>{if(C.current=e,e===-1?P.current.removeAttribute("aria-activedescendant"):P.current.setAttribute("aria-activedescendant",`${$}-option-${e}`),Le&&["mouse","keyboard","touch"].includes(o)&&Le(t,e===-1?null:h[e],o),!E.current)return;const a=E.current.querySelector(`[role="option"].${m}-focused`);a&&(a.classList.remove(`${m}-focused`),a.classList.remove(`${m}-focusVisible`));let l=E.current;if(E.current.getAttribute("role")!=="listbox"&&(l=E.current.parentElement.querySelector('[role="listbox"]')),!l)return;if(e===-1){l.scrollTop=0;return}const w=E.current.querySelector(`[data-option-index="${e}"]`);if(w&&(w.classList.add(`${m}-focused`),o==="keyboard"&&w.classList.add(`${m}-focusVisible`),l.scrollHeight>l.clientHeight&&o!=="mouse"&&o!=="touch")){const b=w,M=l.clientHeight+l.scrollTop,Ue=b.offsetTop+b.offsetHeight;Ue>M?l.scrollTop=Ue-l.clientHeight:b.offsetTop-b.offsetHeight*(ae?1.3:0)<l.scrollTop&&(l.scrollTop=b.offsetTop-b.offsetHeight*(ae?1.3:0))}}),z=_e(({event:t,diff:e,direction:o="next",reason:a})=>{if(!q)return;const w=Qe((()=>{const b=h.length-1;if(e==="reset")return Je;if(e==="start")return 0;if(e==="end")return b;const M=C.current+e;return M<0?M===-1&&Oe?-1:ce&&C.current!==-1||Math.abs(e)>1?0:b:M>b?M===b+1&&Oe?-1:ce||Math.abs(e)>1?b:0:M})(),o);if(W({index:w,reason:a,event:t}),c&&e!=="reset")if(w===-1)P.current.value=f;else{const b=O(h[w]);P.current.value=b,b.toLowerCase().indexOf(f.toLowerCase())===0&&f.length>0&&P.current.setSelectionRange(f.length,b.length)}}),Me=!Pt({array1:D.filteredOptions,array2:h,parser:O}),Xe=()=>{const t=(e,o)=>{const a=e?O(e):"",l=o?O(o):"";return a===l};if(C.current!==-1&&!Pt({array1:D.filteredOptions,array2:h,parser:O})&&D.inputValue===f&&(p?r.length===D.value.length&&D.value.every((e,o)=>O(r[o])===O(e)):t(D.value,r))){const e=D.filteredOptions[C.current];if(e)return h.findIndex(o=>O(o)===O(e))}return-1},Ve=y.useCallback(()=>{if(!q)return;const t=Xe();if(t!==-1){C.current=t;return}const e=p?r[0]:r;if(h.length===0||e==null){z({diff:"reset"});return}if(E.current){if(e!=null){const o=h[C.current];if(p&&o&&r.findIndex(l=>re(o,l))!==-1)return;const a=h.findIndex(l=>re(l,e));a===-1?z({diff:"reset"}):W({index:a});return}if(C.current>=h.length-1){W({index:h.length-1});return}W({index:C.current})}},[h.length,p?!1:r,oe,z,W,q,f,p]),X=_e(t=>{Jt(E,t),t&&Ve()});y.useEffect(()=>{Me&&Ve()},[Ve,Me]);const G=t=>{H||(ie(!0),be(!0),Re&&Re(t))},se=(t,e)=>{H&&(ie(!1),Ke&&Ke(t,e))},K=(t,e,o,a)=>{if(p){if(r.length===e.length&&r.every((l,w)=>l===e[w]))return}else if(r===e)return;Ge&&Ge(t,e,o,a),Ce(e)},Y=y.useRef(!1),Z=(t,e,o="selectOption",a="options")=>{let l=o,w=e;if(p){w=Array.isArray(r)?r.slice():[];const b=w.findIndex(M=>re(e,M));b===-1?w.push(e):a!=="freeSolo"&&(w.splice(b,1),l="removeOption")}ge(t,w,l),K(t,w,l,{option:e}),!J&&(!t||!t.ctrlKey&&!t.metaKey)&&se(t,l),(R===!0||R==="touch"&&Y.current||R==="mouse"&&!Y.current)&&P.current.blur()};function Ze(t,e){if(t===-1)return-1;let o=t;for(;;){if(e==="next"&&o===r.length||e==="previous"&&o===-1)return-1;const a=S?"data-item-index":"data-tag-index",l=Pe.querySelector(`[${a}="${o}"]`);if(!l||!l.hasAttribute("tabindex")||l.disabled||l.getAttribute("aria-disabled")==="true")o+=e==="next"?1:-1;else return o}}const ue=(t,e)=>{if(!p)return;f===""&&se(t,"toggleInput");let o=L;L===-1?f===""&&e==="previous"&&(o=r.length-1):(o+=e==="next"?1:-1,o<0&&(o=0),o===r.length&&(o=-1)),o=Ze(o,e),Fe(o),N(o)},je=t=>{Te.current=!0,le(""),Q&&Q(t,"","clear"),K(t,p?[]:null,"clear")},et=t=>e=>{if(t.onKeyDown&&t.onKeyDown(e),!e.defaultMuiPrevented&&(L!==-1&&!["ArrowLeft","ArrowRight"].includes(e.key)&&(Fe(-1),N(-1)),e.which!==229))switch(e.key){case"Home":q&&We&&(e.preventDefault(),z({diff:"start",direction:"next",reason:"keyboard",event:e}));break;case"End":q&&We&&(e.preventDefault(),z({diff:"end",direction:"previous",reason:"keyboard",event:e}));break;case"PageUp":e.preventDefault(),z({diff:-Vt,direction:"previous",reason:"keyboard",event:e}),G(e);break;case"PageDown":e.preventDefault(),z({diff:Vt,direction:"next",reason:"keyboard",event:e}),G(e);break;case"ArrowDown":e.preventDefault(),z({diff:1,direction:"next",reason:"keyboard",event:e}),G(e);break;case"ArrowUp":e.preventDefault(),z({diff:-1,direction:"previous",reason:"keyboard",event:e}),G(e);break;case"ArrowLeft":!p&&S?N(0):ue(e,"previous");break;case"ArrowRight":!p&&S?N(-1):ue(e,"next");break;case"Enter":if(C.current!==-1&&q){const o=h[C.current],a=B?B(o):!1;if(e.preventDefault(),a)return;Z(e,o,"selectOption"),c&&P.current.setSelectionRange(P.current.value.length,P.current.value.length)}else me&&f!==""&&Ne===!1&&(p&&e.preventDefault(),Z(e,f,"createOption","freeSolo"));break;case"Escape":q?(e.preventDefault(),e.stopPropagation(),se(e,"escape")):I&&(f!==""||p&&r.length>0||S)&&(e.preventDefault(),e.stopPropagation(),je(e));break;case"Backspace":if(p&&!_&&f===""&&r.length>0){const o=L===-1?r.length-1:L,a=r.slice();a.splice(o,1),K(e,a,"removeOption",{option:r[o]})}!p&&S&&!_&&(Ce(null),N(-1));break;case"Delete":if(p&&!_&&f===""&&r.length>0&&L!==-1){const o=L,a=r.slice();a.splice(o,1),K(e,a,"removeOption",{option:r[o]})}!p&&S&&!_&&(Ce(null),N(-1));break}},ye=t=>{De(!0),mt&&!Te.current&&G(t)},ve=t=>{if(s(E)){P.current.focus();return}De(!1),we.current=!0,Te.current=!1,F&&C.current!==-1&&q?Z(t,h[C.current],"blur"):F&&me&&f!==""?Z(t,f,"blur","freeSolo"):k&&ge(t,r,"blur"),se(t,"blur")},Ae=t=>{const e=t.target.value;f!==e&&(le(e),be(!1),Q&&Q(t,e,"input")),e===""?!U&&!p&&K(t,null,"clear"):G(t)},tt=t=>{const e=Number(t.currentTarget.getAttribute("data-option-index"));C.current!==e&&W({event:t,index:e,reason:"mouse"})},nt=t=>{W({event:t,index:Number(t.currentTarget.getAttribute("data-option-index")),reason:"touch"}),Y.current=!0},ot=t=>{const e=Number(t.currentTarget.getAttribute("data-option-index"));Z(t,h[e],"selectOption"),Y.current=!1},at=t=>e=>{const o=r.slice();o.splice(t,1),K(e,o,"removeOption",{option:r[t]})},Se=t=>{K(t,null,"removeOption",{option:r})},x=t=>{H?se(t,"toggleInput"):G(t)},T=t=>{t.currentTarget.contains(t.target)&&t.target.getAttribute("id")!==$&&t.preventDefault()},ee=t=>{t.currentTarget.contains(t.target)&&(P.current.focus(),Ye&&we.current&&P.current.selectionEnd-P.current.selectionStart===0&&P.current.select(),we.current=!1)},rt=t=>{!A&&(f===""||!H)&&x(t)};let qe=me&&f.length>0;qe=qe||(p?r.length>0:r!==null);let Be=h;return ae&&(Be=h.reduce((t,e,o)=>{const a=ae(e);return t.length>0&&t[t.length-1].group===a?t[t.length-1].options.push(e):t.push({key:o,index:o,group:a,options:[e]}),t},[])),A&&he&&ve(),{getRootProps:(t={})=>({...t,onKeyDown:et(t),onMouseDown:T,onClick:ee}),getInputLabelProps:()=>({id:`${$}-label`,htmlFor:$}),getInputProps:()=>({id:$,value:f,onBlur:ve,onFocus:ye,onChange:Ae,onMouseDown:rt,"aria-activedescendant":q?"":null,"aria-autocomplete":c?"both":"list","aria-controls":ze?`${$}-listbox`:void 0,"aria-expanded":ze,autoComplete:"off",ref:P,autoCapitalize:"none",spellCheck:"false",role:"combobox",disabled:A}),getClearProps:()=>({tabIndex:-1,type:"button",onClick:je}),getItemProps:({index:t=0}={})=>({...p&&{key:t},...S?{"data-item-index":t}:{"data-tag-index":t},tabIndex:-1,...!_&&{onDelete:p?at(t):Se}}),getPopupIndicatorProps:()=>({tabIndex:-1,type:"button",onClick:x}),getTagProps:({index:t})=>({key:t,"data-tag-index":t,tabIndex:-1,...!_&&{onDelete:at(t)}}),getListboxProps:()=>({role:"listbox",id:`${$}-listbox`,"aria-labelledby":`${$}-label`,ref:X,onMouseDown:t=>{t.preventDefault()}}),getOptionProps:({index:t,option:e})=>{const o=(p?r:[r]).some(l=>l!=null&&re(e,l)),a=B?B(e):!1;return{key:dt?.(e)??O(e),tabIndex:-1,role:"option",id:`${$}-option-${t}`,onMouseMove:tt,onClick:ot,onTouchStart:nt,"data-option-index":t,"aria-disabled":a,"aria-selected":o}},id:$,inputValue:f,value:r,dirty:qe,expanded:q&&Pe,popupOpen:q,focused:he||L!==-1,anchorEl:Pe,setAnchorEl:gt,focusedItem:L,focusedTag:L,groupedOptions:Be}}function ln(n){return Yt("MuiAutocomplete",n)}const i=Kt("MuiAutocomplete",["root","expanded","fullWidth","focused","focusVisible","tag","tagSizeSmall","tagSizeMedium","hasPopupIcon","hasClearIcon","inputRoot","input","inputFocused","endAdornment","clearIndicator","popupIndicator","popupIndicatorOpen","popper","popperDisablePortal","paper","listbox","loading","noOptions","option","groupLabel","groupUl"]);var St,qt;const sn=n=>{const{classes:s,disablePortal:m,expanded:c,focused:g,fullWidth:F,hasClearIcon:R,hasPopupIcon:k,inputFocused:I,popupOpen:v,size:V}=n,U={root:["root",c&&"expanded",g&&"focused",F&&"fullWidth",R&&"hasClearIcon",k&&"hasPopupIcon"],inputRoot:["inputRoot"],input:["input",I&&"inputFocused"],tag:["tag",`tagSize${$t(V)}`],endAdornment:["endAdornment"],clearIndicator:["clearIndicator"],popupIndicator:["popupIndicator",v&&"popupIndicatorOpen"],popper:["popper",m&&"popperDisablePortal"],paper:["paper"],listbox:["listbox"],loading:["loading"],noOptions:["noOptions"],option:["option"],groupLabel:["groupLabel"],groupUl:["groupUl"]};return Qt(U,ln,s)},un=j("div",{name:"MuiAutocomplete",slot:"Root",overridesResolver:(n,s)=>{const{ownerState:m}=n,{fullWidth:c,hasClearIcon:g,hasPopupIcon:F,inputFocused:R,size:k}=m;return[{[`& .${i.tag}`]:s.tag},{[`& .${i.tag}`]:s[`tagSize${$t(k)}`]},{[`& .${i.inputRoot}`]:s.inputRoot},{[`& .${i.input}`]:s.input},{[`& .${i.input}`]:R&&s.inputFocused},s.root,c&&s.fullWidth,F&&s.hasPopupIcon,g&&s.hasClearIcon]}})({[`&.${i.focused} .${i.clearIndicator}`]:{visibility:"visible"},"@media (pointer: fine)":{[`&:hover .${i.clearIndicator}`]:{visibility:"visible"}},[`& .${i.tag}`]:{margin:3,maxWidth:"calc(100% - 6px)"},[`& .${i.inputRoot}`]:{[`.${i.hasPopupIcon}&, .${i.hasClearIcon}&`]:{paddingRight:30},[`.${i.hasPopupIcon}.${i.hasClearIcon}&`]:{paddingRight:56},[`& .${i.input}`]:{width:0,minWidth:30}},[`& .${it.root}`]:{paddingBottom:1,"& .MuiInput-input":{padding:"4px 4px 4px 0px"}},[`& .${it.root}.${pe.sizeSmall}`]:{[`& .${it.input}`]:{padding:"2px 4px 3px 0"}},[`& .${Tt.root}`]:{padding:9,[`.${i.hasPopupIcon}&, .${i.hasClearIcon}&`]:{paddingRight:39},[`.${i.hasPopupIcon}.${i.hasClearIcon}&`]:{paddingRight:65},[`& .${i.input}`]:{padding:"7.5px 4px 7.5px 5px"},[`& .${i.endAdornment}`]:{right:9}},[`& .${Tt.root}.${pe.sizeSmall}`]:{paddingTop:6,paddingBottom:6,paddingLeft:6,[`& .${i.input}`]:{padding:"2.5px 4px 2.5px 8px"}},[`& .${xe.root}`]:{paddingTop:19,paddingLeft:8,[`.${i.hasPopupIcon}&, .${i.hasClearIcon}&`]:{paddingRight:39},[`.${i.hasPopupIcon}.${i.hasClearIcon}&`]:{paddingRight:65},[`& .${xe.input}`]:{padding:"7px 4px"},[`& .${i.endAdornment}`]:{right:9}},[`& .${xe.root}.${pe.sizeSmall}`]:{paddingBottom:1,[`& .${xe.input}`]:{padding:"2.5px 4px"}},[`& .${pe.hiddenLabel}`]:{paddingTop:8},[`& .${xe.root}.${pe.hiddenLabel}`]:{paddingTop:0,paddingBottom:0,[`& .${i.input}`]:{paddingTop:16,paddingBottom:17}},[`& .${xe.root}.${pe.hiddenLabel}.${pe.sizeSmall}`]:{[`& .${i.input}`]:{paddingTop:8,paddingBottom:9}},[`& .${i.input}`]:{flexGrow:1,textOverflow:"ellipsis",opacity:0},variants:[{props:{fullWidth:!0},style:{width:"100%"}},{props:{size:"small"},style:{[`& .${i.tag}`]:{margin:2,maxWidth:"calc(100% - 4px)"}}},{props:{inputFocused:!0},style:{[`& .${i.input}`]:{opacity:1}}},{props:{multiple:!0},style:{[`& .${i.inputRoot}`]:{flexWrap:"wrap"}}}]}),pn=j("div",{name:"MuiAutocomplete",slot:"EndAdornment"})({position:"absolute",right:0,top:"50%",transform:"translate(0, -50%)"}),dn=j(Dt,{name:"MuiAutocomplete",slot:"ClearIndicator"})({marginRight:-2,padding:4,visibility:"hidden"}),cn=j(Dt,{name:"MuiAutocomplete",slot:"PopupIndicator",overridesResolver:(n,s)=>{const{ownerState:m}=n;return[s.popupIndicator,m.popupOpen&&s.popupIndicatorOpen]}})({padding:2,marginRight:-2,variants:[{props:{popupOpen:!0},style:{transform:"rotate(180deg)"}}]}),fn=j(Ft,{name:"MuiAutocomplete",slot:"Popper",overridesResolver:(n,s)=>{const{ownerState:m}=n;return[{[`& .${i.option}`]:s.option},s.popper,m.disablePortal&&s.popperDisablePortal]}})(Ie(({theme:n})=>({zIndex:(n.vars||n).zIndex.modal,variants:[{props:{disablePortal:!0},style:{position:"absolute"}}]}))),mn=j(Et,{name:"MuiAutocomplete",slot:"Paper"})(Ie(({theme:n})=>({...n.typography.body1,overflow:"auto"}))),hn=j("div",{name:"MuiAutocomplete",slot:"Loading"})(Ie(({theme:n})=>({color:(n.vars||n).palette.text.secondary,padding:"14px 16px"}))),gn=j("div",{name:"MuiAutocomplete",slot:"NoOptions"})(Ie(({theme:n})=>({color:(n.vars||n).palette.text.secondary,padding:"14px 16px"}))),bn=j("ul",{name:"MuiAutocomplete",slot:"Listbox"})(Ie(({theme:n})=>({listStyle:"none",margin:0,padding:"8px 0",maxHeight:"40vh",overflow:"auto",position:"relative",[`& .${i.option}`]:{minHeight:48,display:"flex",overflow:"hidden",justifyContent:"flex-start",alignItems:"center",cursor:"pointer",paddingTop:6,boxSizing:"border-box",outline:"0",WebkitTapHighlightColor:"transparent",paddingBottom:6,paddingLeft:16,paddingRight:16,[n.breakpoints.up("sm")]:{minHeight:"auto"},[`&.${i.focused}`]:{backgroundColor:(n.vars||n).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},'&[aria-disabled="true"]':{opacity:(n.vars||n).palette.action.disabledOpacity,pointerEvents:"none"},[`&.${i.focusVisible}`]:{backgroundColor:(n.vars||n).palette.action.focus},'&[aria-selected="true"]':{backgroundColor:n.alpha((n.vars||n).palette.primary.main,(n.vars||n).palette.action.selectedOpacity),[`&.${i.focused}`]:{backgroundColor:n.alpha((n.vars||n).palette.primary.main,`${(n.vars||n).palette.action.selectedOpacity} + ${(n.vars||n).palette.action.hoverOpacity}`),"@media (hover: none)":{backgroundColor:(n.vars||n).palette.action.selected}},[`&.${i.focusVisible}`]:{backgroundColor:n.alpha((n.vars||n).palette.primary.main,`${(n.vars||n).palette.action.selectedOpacity} + ${(n.vars||n).palette.action.focusOpacity}`)}}}}))),yn=j(Zt,{name:"MuiAutocomplete",slot:"GroupLabel"})(Ie(({theme:n})=>({backgroundColor:(n.vars||n).palette.background.paper,top:-8}))),vn=j("ul",{name:"MuiAutocomplete",slot:"GroupUl"})({padding:0,[`& .${i.option}`]:{paddingLeft:24}}),xn=y.forwardRef(function(s,m){const c=zt({props:s,name:"MuiAutocomplete"}),{autoComplete:g=!1,autoHighlight:F=!1,autoSelect:R=!1,blurOnSelect:k=!1,ChipProps:I,className:v,clearIcon:V=St||(St=u.jsx(Gt,{fontSize:"small"})),clearOnBlur:U=!c.freeSolo,clearOnEscape:J=!1,clearText:A="Clear",closeText:de="Close",componentsProps:ce,defaultValue:fe=c.multiple?[]:null,disableClearable:oe=!1,disableCloseOnSelect:me=!1,disabled:B=!1,disabledItemsFocusable:dt=!1,disableListWrap:He=!1,disablePortal:ae=!1,filterOptions:We,filterSelectedOptions:ct=!1,forcePopupIcon:Oe="auto",freeSolo:$e=!1,fullWidth:re=!1,getLimitTagsText:p=d=>`+${d}`,getOptionDisabled:Ge,getOptionKey:Ke,getOptionLabel:Le,isOptionEqualToValue:Q,groupBy:Re,handleHomeEndKeys:ft=!c.freeSolo,id:mt,includeInputInList:ht=!1,inputValue:_,limitTags:S=-1,ListboxComponent:Ye,ListboxProps:Ee,loading:$=!1,loadingText:O="Loading…",multiple:Te=!1,noOptionsText:we="No options",onChange:P,onClose:E,onHighlightChange:Pe,onInputChange:gt,onOpen:L,open:Fe,openOnFocus:Je=!1,openText:C="Open",options:bt,PaperComponent:r,PopperComponent:Ce,popupIcon:f=qt||(qt=u.jsx(Wt,{})),readOnly:le=!1,renderGroup:he,renderInput:De,renderOption:ge,renderTags:H,renderValue:ie,selectOnFocus:yt=!c.freeSolo,size:be="medium",slots:Ne={},slotProps:q={},value:h,...D}=c,{getRootProps:ze,getInputProps:N,getInputLabelProps:Qe,getPopupIndicatorProps:W,getClearProps:z,getItemProps:Me,getListboxProps:Xe,getOptionProps:Ve,value:X,dirty:G,expanded:se,id:K,popupOpen:Y,focused:Z,focusedItem:Ze,anchorEl:ue,setAnchorEl:je,inputValue:et,groupedOptions:ye}=rn({...c,componentName:"Autocomplete"}),ve=!oe&&!B&&G&&!le,Ae=(!$e||Oe===!0)&&Oe!==!1,{onMouseDown:tt}=N(),{ref:nt,...ot}=Xe(),Se=Le||(d=>d.label??d),x={...c,disablePortal:ae,expanded:se,focused:Z,fullWidth:re,getOptionLabel:Se,hasClearIcon:ve,hasPopupIcon:Ae,inputFocused:Ze===-1,popupOpen:Y,size:be},T=sn(x),ee={slots:{paper:r,popper:Ce,...Ne},slotProps:{chip:I,listbox:Ee,...ce,...q}},[rt,qe]=st("listbox",{elementType:bn,externalForwardedProps:ee,ownerState:x,className:T.listbox,additionalProps:ot,ref:nt}),[Be,t]=st("paper",{elementType:Et,externalForwardedProps:ee,ownerState:x,className:T.paper}),[e,o]=st("popper",{elementType:Ft,externalForwardedProps:ee,ownerState:x,className:T.popper,additionalProps:{disablePortal:ae,style:{width:ue?ue.clientWidth:null},role:"presentation",anchorEl:ue,open:Y}});let a;const l=d=>({className:T.tag,disabled:B,...Me(d)});if(Te?X.length>0&&(H?a=H(X,l,x):ie?a=ie(X,l,x):a=X.map((d,te)=>{const{key:ne,...ke}=l({index:te});return u.jsx(Xt,{label:Se(d),size:be,...ke,...ee.slotProps.chip},ne)})):ie&&X!=null&&(a=ie(X,l,x)),S>-1&&Array.isArray(a)){const d=a.length-S;!Z&&d>0&&(a=a.splice(0,S),a.push(u.jsx("span",{className:T.tag,children:p(d)},a.length)))}const b=he||(d=>u.jsxs("li",{children:[u.jsx(yn,{className:T.groupLabel,ownerState:x,component:"div",children:d.group}),u.jsx(vn,{className:T.groupUl,ownerState:x,children:d.children})]},d.key)),Ue=ge||((d,te)=>{const{key:ne,...ke}=d;return u.jsx("li",{...ke,children:Se(te)},ne)}),vt=(d,te)=>{const ne=Ve({option:d,index:te});return Ue({...ne,className:T.option},d,{selected:ne["aria-selected"],index:te,inputValue:et},x)},xt=ee.slotProps.clearIndicator,It=ee.slotProps.popupIndicator;return u.jsxs(y.Fragment,{children:[u.jsx(un,{ref:m,className:lt(T.root,v),ownerState:x,...ze(D),children:De({id:K,disabled:B,fullWidth:!0,size:be==="small"?"small":void 0,InputLabelProps:Qe(),InputProps:{ref:je,className:T.inputRoot,startAdornment:a,onMouseDown:d=>{d.target===d.currentTarget&&tt(d)},...(ve||Ae)&&{endAdornment:u.jsxs(pn,{className:T.endAdornment,ownerState:x,children:[ve?u.jsx(dn,{...z(),"aria-label":A,title:A,ownerState:x,...xt,className:lt(T.clearIndicator,xt?.className),children:V}):null,Ae?u.jsx(cn,{...W(),disabled:B,"aria-label":Y?de:C,title:Y?de:C,ownerState:x,...It,className:lt(T.popupIndicator,It?.className),children:f}):null]})}},inputProps:{className:T.input,disabled:B,readOnly:le,...N()}})}),ue?u.jsx(fn,{as:e,...o,children:u.jsxs(mn,{as:Be,...t,children:[$&&ye.length===0?u.jsx(hn,{className:T.loading,ownerState:x,children:O}):null,ye.length===0&&!$e&&!$?u.jsx(gn,{className:T.noOptions,ownerState:x,role:"presentation",onMouseDown:d=>{d.preventDefault()},children:we}):null,ye.length>0?u.jsx(rt,{as:Ye,...qe,children:ye.map((d,te)=>Re?b({key:d.key,group:d.group,children:d.options.map((ne,ke)=>vt(ne,d.index+ke))}):vt(d,te))}):null]})}):null]})}),In=Rt(u.jsx("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"})),On=Rt(u.jsx("path",{d:"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"})),pt=Lt.forwardRef(function({label:s,placeholder:m,loading:c,inputProps:g,slotProps:F,...R},k){return u.jsx(xn,{ref:k,loading:c,renderInput:I=>u.jsx(_t,{...I,...g,label:s,placeholder:m,slotProps:{input:{...g?.slotProps?.input,...I.InputProps,startAdornment:g?.startAdornment||I.InputProps.startAdornment?u.jsxs(u.Fragment,{children:[g?.startAdornment?u.jsx(wt,{position:"start",children:g?.startAdornment}):void 0,I.InputProps.startAdornment]}):void 0,endAdornment:c||g?.endAdornment||I.InputProps.endAdornment?u.jsxs(u.Fragment,{children:[c||g?.endAdornment?u.jsxs(wt,{position:"end",children:[c?u.jsx(Ht,{color:"inherit",size:18}):null,g?.endAdornment]}):void 0,I.InputProps.endAdornment]}):void 0},...g?.slotProps}}),renderOption:(I,v,{selected:V,inputValue:U},{getOptionLabel:J,getOptionDisabled:A})=>{if(typeof v=="string")return u.jsx(Ot,{text:v},v);const de=Mt(J(v),U,{insideWords:!0}),ce=jt(J(v),de);return y.createElement(Ot,{...I,key:v.id||I.key,asButton:!0,text:v?.inputValue?J(v):u.jsx(u.Fragment,{children:ce.map((fe,oe)=>fe.highlight&&!A?.(v)?u.jsx("mark",{children:fe.text},oe):u.jsx("span",{children:fe.text},oe))}),selected:V,disabled:A?.(v)})},slots:{listbox:Bt,paper:Ut},popupIcon:u.jsx(In,{}),clearIcon:u.jsx(On,{}),slotProps:{clearIndicator:{size:"small"},chip:{size:"small"},...F},...R})}),kt=Lt.memo(pt);try{createFilterOptions.displayName="createFilterOptions",createFilterOptions.__docgenInfo={description:"",displayName:"createFilterOptions",props:{ignoreAccents:{defaultValue:null,description:"",name:"ignoreAccents",required:!1,type:{name:"boolean"}},ignoreCase:{defaultValue:null,description:"",name:"ignoreCase",required:!1,type:{name:"boolean"}},limit:{defaultValue:null,description:"",name:"limit",required:!1,type:{name:"number"}},matchFrom:{defaultValue:null,description:"",name:"matchFrom",required:!1,type:{name:"enum",value:[{value:'"start"'},{value:'"any"'}]}},stringify:{defaultValue:null,description:"",name:"stringify",required:!1,type:{name:"((option: Value) => string)"}},trim:{defaultValue:null,description:"",name:"trim",required:!1,type:{name:"boolean"}}}}}catch{}try{pt.displayName="AutocompleteRaw",pt.__docgenInfo={description:"",displayName:"AutocompleteRaw",props:{label:{defaultValue:null,description:"Label of the Autocomplete Input",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder of the Autocomplete Input",name:"placeholder",required:!1,type:{name:"string"}},inputProps:{defaultValue:null,description:"Properties that are passed renderInput\n@param value The `value` provided to the component.",name:"inputProps",required:!1,type:{name:"TextFieldProps"}},defaultValue:{defaultValue:{value:"props.multiple ? [] : null"},description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"unknown"}},id:{defaultValue:null,description:`This prop is used to help implement the accessibility logic.
If you don't provide an id it will fall back to a randomly generated one.`,name:"id",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:`Callback fired when the value changes.
@param event The event source of the callback.
@param value The new value of the component.
@param reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
@param details`,name:"onChange",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>, value: unknown, reason: AutocompleteChangeReason, details?: AutocompleteChangeDetails<unknown>) => void)"}},closeText:{defaultValue:{value:"'Close'"},description:`Override the default text for the *close popup* icon button.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"closeText",required:!1,type:{name:"string"}},onClose:{defaultValue:null,description:'Callback fired when the popup requests to be closed.\nUse in controlled mode (see open).\n@param event The event source of the callback.\n@param reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.',name:"onClose",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>, reason: AutocompleteCloseReason) => void)"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},options:{defaultValue:null,description:"A list of options that will be shown in the Autocomplete.",name:"options",required:!0,type:{name:"readonly unknown[]"}},autoComplete:{defaultValue:{value:"false"},description:"If `true`, the portion of the selected suggestion that the user hasn't typed,\nknown as the completion string, appears inline after the input cursor in the textbox.\nThe inline completion string is visually highlighted and has a selected state.",name:"autoComplete",required:!1,type:{name:"boolean"}},blurOnSelect:{defaultValue:{value:"false"},description:"Control if the input should be blurred when an option is selected:\n\n- `false` the input is not blurred.\n- `true` the input is always blurred.\n- `touch` the input is blurred after a touch event.\n- `mouse` the input is blurred after a mouse event.",name:"blurOnSelect",required:!1,type:{name:'boolean | "touch" | "mouse"'}},componentsProps:{defaultValue:null,description:"The props used for each slot inside.\n@deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"componentsProps",required:!1,type:{name:"{ clearIndicator?: Partial<IconButtonProps>; paper?: PaperProps; popper?: Partial<PopperProps> | undefined; popupIndicator?: Partial<...> | undefined; } | undefined"}},clearOnBlur:{defaultValue:{value:"!props.freeSolo"},description:"If `true`, the input's text is cleared on blur if no value is selected.\n\nSet it to `true` if you want to help the user enter a new value.\nSet it to `false` if you want to help the user resume their search.",name:"clearOnBlur",required:!1,type:{name:"boolean"}},disableClearable:{defaultValue:{value:"false"},description:"If `true`, the input can't be cleared.",name:"disableClearable",required:!1,type:{name:"boolean"}},disableCloseOnSelect:{defaultValue:{value:"false"},description:"If `true`, the popup won't close when a value is selected.",name:"disableCloseOnSelect",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disablePortal:{defaultValue:{value:"false"},description:"If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.",name:"disablePortal",required:!1,type:{name:"boolean"}},filterOptions:{defaultValue:{value:"createFilterOptions()"},description:`A function that determines the filtered options to be rendered on search.
@param options The options to render.
@param state The state of the component.
@returns`,name:"filterOptions",required:!1,type:{name:"((options: unknown[], state: FilterOptionsState<unknown>) => unknown[])"}},filterSelectedOptions:{defaultValue:{value:"false"},description:"If `true`, hide the selected options from the list box.",name:"filterSelectedOptions",required:!1,type:{name:"boolean"}},freeSolo:{defaultValue:{value:"false"},description:"If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",name:"freeSolo",required:!1,type:{name:"boolean"}},getOptionDisabled:{defaultValue:null,description:`Used to determine the disabled state for a given option.
@param option The option to test.
@template Value The option shape. Will be the same shape as an item of the options.
@returns`,name:"getOptionDisabled",required:!1,type:{name:"((option: unknown) => boolean)"}},getOptionLabel:{defaultValue:{value:"(option) => option.label ?? option"},description:`Used to determine the string value for a given option.
It's used to fill the input (and the list box options if \`renderOption\` is not provided).

If used in free solo mode, it must accept both the type of the options and a string.
@param option
@returns`,name:"getOptionLabel",required:!1,type:{name:"((option: unknown) => string)"}},groupBy:{defaultValue:null,description:`If provided, the options will be grouped under the returned string.
The groupBy value is also used as the text for group headings when \`renderGroup\` is not provided.
@param option The Autocomplete option.
@returns`,name:"groupBy",required:!1,type:{name:"((option: unknown) => string)"}},inputValue:{defaultValue:null,description:"The input value.",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:'Callback fired when the input value changes.\n@param event The event source of the callback.\n@param value The new value of the text input.\n@param reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`, `"blur"`, `"selectOption"`, `"removeOption"`',name:"onInputChange",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>, value: string, reason: AutocompleteInputChangeReason) => void)"}},multiple:{defaultValue:{value:"false"},description:"If `true`, `value` must be an array and the menu will support multiple selections.",name:"multiple",required:!1,type:{name:"boolean"}},onOpen:{defaultValue:null,description:`Callback fired when the popup requests to be opened.
Use in controlled mode (see open).
@param event The event source of the callback.`,name:"onOpen",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>) => void)"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!1,type:{name:"boolean"}},openOnFocus:{defaultValue:{value:"false"},description:"If `true`, the popup will open on input focus.",name:"openOnFocus",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:{value:"false"},description:"If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",name:"readOnly",required:!1,type:{name:"boolean"}},selectOnFocus:{defaultValue:{value:"!props.freeSolo"},description:"If `true`, the input's text is selected on focus.\nIt helps the user clear the selected value.",name:"selectOnFocus",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The value of the autocomplete.

The value must have reference equality with the option in order to be selected.
You can customize the equality behavior with the \`isOptionEqualToValue\` prop.`,name:"value",required:!1,type:{name:"unknown"}},clearText:{defaultValue:{value:"'Clear'"},description:`Override the default text for the *clear* icon button.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"clearText",required:!1,type:{name:"string"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the input will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},getLimitTagsText:{defaultValue:{value:"(more) => `+${more}`"},description:"The label to display when the tags are truncated (`limitTags`).\n@param more The number of truncated tags.\n@returns",name:"getLimitTagsText",required:!1,type:{name:"((more: number) => ReactNode)"}},loading:{defaultValue:{value:"false"},description:"If `true`, the component is in a loading state.\nThis shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).",name:"loading",required:!1,type:{name:"boolean"}},loadingText:{defaultValue:{value:"'Loading…'"},description:`Text to display when in a loading state.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"loadingText",required:!1,type:{name:"ReactNode"}},limitTags:{defaultValue:{value:"-1"},description:"The maximum number of tags that will be visible when not focused.\nSet `-1` to disable the limit.",name:"limitTags",required:!1,type:{name:"number"}},noOptionsText:{defaultValue:{value:"'No options'"},description:`Text to display when there are no options.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"noOptionsText",required:!1,type:{name:"ReactNode"}},openText:{defaultValue:{value:"'Open'"},description:`Override the default text for the *open popup* icon button.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"openText",required:!1,type:{name:"string"}},renderGroup:{defaultValue:null,description:`Render the group.
@param params The group to render.
@returns`,name:"renderGroup",required:!1,type:{name:"((params: AutocompleteRenderGroupParams) => ReactNode)"}},renderOption:{defaultValue:null,description:`Render the option, use \`getOptionLabel\` by default.
@param props The props to apply on the li element.
@param option The option to render.
@param state The state of each option.
@param ownerState The state of the Autocomplete component.
@returns`,name:"renderOption",required:!1,type:{name:"((props: HTMLAttributes<HTMLLIElement> & { key: any; }, option: unknown, state: AutocompleteRenderOptionState, ownerState: AutocompleteOwnerState<...>) => ReactNode)"}},renderTags:{defaultValue:null,description:`Render the selected value when doing multiple selections.
@deprecated Use \`renderValue\` prop instead
@param value The \`value\` provided to the component.
@param getTagProps A tag props getter.
@param ownerState The state of the Autocomplete component.
@returns`,name:"renderTags",required:!1,type:{name:'((value: unknown[], getTagProps: AutocompleteRenderGetTagProps, ownerState: AutocompleteOwnerState<unknown, boolean, boolean, boolean | undefined, "div">) => ReactNode) | undefined'}},isOptionEqualToValue:{defaultValue:null,description:`Used to determine if the option represents the given value.
Uses strict equality by default.
⚠️ Both arguments need to be handled, an option can only match with one value.
@param option The option to test.
@param value The value to test against.
@returns`,name:"isOptionEqualToValue",required:!1,type:{name:"((option: unknown, value: unknown) => boolean)"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ chip?: SlotProps<ElementType<Partial<ChipProps<"div">>, keyof IntrinsicElements>, {}, AutocompleteOwnerState<unknown, boolean, boolean, boolean | undefined, "div">> | undefined; ... 4 more ...; popupIndicator?: SlotProps<...> | undefined; } | undefined'}}}}}catch{}try{kt.displayName="Autocomplete",kt.__docgenInfo={description:"",displayName:"Autocomplete",props:{label:{defaultValue:null,description:"Label of the Autocomplete Input",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder of the Autocomplete Input",name:"placeholder",required:!1,type:{name:"string"}},inputProps:{defaultValue:null,description:"Properties that are passed renderInput\n@param value The `value` provided to the component.",name:"inputProps",required:!1,type:{name:"TextFieldProps"}},defaultValue:{defaultValue:{value:"props.multiple ? [] : null"},description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"unknown"}},id:{defaultValue:null,description:`This prop is used to help implement the accessibility logic.
If you don't provide an id it will fall back to a randomly generated one.`,name:"id",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:`Callback fired when the value changes.
@param event The event source of the callback.
@param value The new value of the component.
@param reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
@param details`,name:"onChange",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>, value: unknown, reason: AutocompleteChangeReason, details?: AutocompleteChangeDetails<unknown>) => void)"}},closeText:{defaultValue:{value:"'Close'"},description:`Override the default text for the *close popup* icon button.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"closeText",required:!1,type:{name:"string"}},onClose:{defaultValue:null,description:'Callback fired when the popup requests to be closed.\nUse in controlled mode (see open).\n@param event The event source of the callback.\n@param reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.',name:"onClose",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>, reason: AutocompleteCloseReason) => void)"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},options:{defaultValue:null,description:"A list of options that will be shown in the Autocomplete.",name:"options",required:!0,type:{name:"readonly unknown[]"}},autoComplete:{defaultValue:{value:"false"},description:"If `true`, the portion of the selected suggestion that the user hasn't typed,\nknown as the completion string, appears inline after the input cursor in the textbox.\nThe inline completion string is visually highlighted and has a selected state.",name:"autoComplete",required:!1,type:{name:"boolean"}},blurOnSelect:{defaultValue:{value:"false"},description:"Control if the input should be blurred when an option is selected:\n\n- `false` the input is not blurred.\n- `true` the input is always blurred.\n- `touch` the input is blurred after a touch event.\n- `mouse` the input is blurred after a mouse event.",name:"blurOnSelect",required:!1,type:{name:'boolean | "touch" | "mouse"'}},componentsProps:{defaultValue:null,description:"The props used for each slot inside.\n@deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"componentsProps",required:!1,type:{name:"{ clearIndicator?: Partial<IconButtonProps>; paper?: PaperProps; popper?: Partial<PopperProps> | undefined; popupIndicator?: Partial<...> | undefined; } | undefined"}},clearOnBlur:{defaultValue:{value:"!props.freeSolo"},description:"If `true`, the input's text is cleared on blur if no value is selected.\n\nSet it to `true` if you want to help the user enter a new value.\nSet it to `false` if you want to help the user resume their search.",name:"clearOnBlur",required:!1,type:{name:"boolean"}},disableClearable:{defaultValue:{value:"false"},description:"If `true`, the input can't be cleared.",name:"disableClearable",required:!1,type:{name:"boolean"}},disableCloseOnSelect:{defaultValue:{value:"false"},description:"If `true`, the popup won't close when a value is selected.",name:"disableCloseOnSelect",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disablePortal:{defaultValue:{value:"false"},description:"If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.",name:"disablePortal",required:!1,type:{name:"boolean"}},filterOptions:{defaultValue:{value:"createFilterOptions()"},description:`A function that determines the filtered options to be rendered on search.
@param options The options to render.
@param state The state of the component.
@returns`,name:"filterOptions",required:!1,type:{name:"((options: unknown[], state: FilterOptionsState<unknown>) => unknown[])"}},filterSelectedOptions:{defaultValue:{value:"false"},description:"If `true`, hide the selected options from the list box.",name:"filterSelectedOptions",required:!1,type:{name:"boolean"}},freeSolo:{defaultValue:{value:"false"},description:"If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",name:"freeSolo",required:!1,type:{name:"boolean"}},getOptionDisabled:{defaultValue:null,description:`Used to determine the disabled state for a given option.
@param option The option to test.
@template Value The option shape. Will be the same shape as an item of the options.
@returns`,name:"getOptionDisabled",required:!1,type:{name:"((option: unknown) => boolean)"}},getOptionLabel:{defaultValue:{value:"(option) => option.label ?? option"},description:`Used to determine the string value for a given option.
It's used to fill the input (and the list box options if \`renderOption\` is not provided).

If used in free solo mode, it must accept both the type of the options and a string.
@param option
@returns`,name:"getOptionLabel",required:!1,type:{name:"((option: unknown) => string)"}},groupBy:{defaultValue:null,description:`If provided, the options will be grouped under the returned string.
The groupBy value is also used as the text for group headings when \`renderGroup\` is not provided.
@param option The Autocomplete option.
@returns`,name:"groupBy",required:!1,type:{name:"((option: unknown) => string)"}},inputValue:{defaultValue:null,description:"The input value.",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:'Callback fired when the input value changes.\n@param event The event source of the callback.\n@param value The new value of the text input.\n@param reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`, `"blur"`, `"selectOption"`, `"removeOption"`',name:"onInputChange",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>, value: string, reason: AutocompleteInputChangeReason) => void)"}},multiple:{defaultValue:{value:"false"},description:"If `true`, `value` must be an array and the menu will support multiple selections.",name:"multiple",required:!1,type:{name:"boolean"}},onOpen:{defaultValue:null,description:`Callback fired when the popup requests to be opened.
Use in controlled mode (see open).
@param event The event source of the callback.`,name:"onOpen",required:!1,type:{name:"((event: SyntheticEvent<Element, Event>) => void)"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!1,type:{name:"boolean"}},openOnFocus:{defaultValue:{value:"false"},description:"If `true`, the popup will open on input focus.",name:"openOnFocus",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:{value:"false"},description:"If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",name:"readOnly",required:!1,type:{name:"boolean"}},selectOnFocus:{defaultValue:{value:"!props.freeSolo"},description:"If `true`, the input's text is selected on focus.\nIt helps the user clear the selected value.",name:"selectOnFocus",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The value of the autocomplete.

The value must have reference equality with the option in order to be selected.
You can customize the equality behavior with the \`isOptionEqualToValue\` prop.`,name:"value",required:!1,type:{name:"unknown"}},clearText:{defaultValue:{value:"'Clear'"},description:`Override the default text for the *clear* icon button.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"clearText",required:!1,type:{name:"string"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the input will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},getLimitTagsText:{defaultValue:{value:"(more) => `+${more}`"},description:"The label to display when the tags are truncated (`limitTags`).\n@param more The number of truncated tags.\n@returns",name:"getLimitTagsText",required:!1,type:{name:"((more: number) => ReactNode)"}},loading:{defaultValue:{value:"false"},description:"If `true`, the component is in a loading state.\nThis shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).",name:"loading",required:!1,type:{name:"boolean"}},loadingText:{defaultValue:{value:"'Loading…'"},description:`Text to display when in a loading state.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"loadingText",required:!1,type:{name:"ReactNode"}},limitTags:{defaultValue:{value:"-1"},description:"The maximum number of tags that will be visible when not focused.\nSet `-1` to disable the limit.",name:"limitTags",required:!1,type:{name:"number"}},noOptionsText:{defaultValue:{value:"'No options'"},description:`Text to display when there are no options.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"noOptionsText",required:!1,type:{name:"ReactNode"}},openText:{defaultValue:{value:"'Open'"},description:`Override the default text for the *open popup* icon button.

For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).`,name:"openText",required:!1,type:{name:"string"}},renderGroup:{defaultValue:null,description:`Render the group.
@param params The group to render.
@returns`,name:"renderGroup",required:!1,type:{name:"((params: AutocompleteRenderGroupParams) => ReactNode)"}},renderOption:{defaultValue:null,description:`Render the option, use \`getOptionLabel\` by default.
@param props The props to apply on the li element.
@param option The option to render.
@param state The state of each option.
@param ownerState The state of the Autocomplete component.
@returns`,name:"renderOption",required:!1,type:{name:"((props: HTMLAttributes<HTMLLIElement> & { key: any; }, option: unknown, state: AutocompleteRenderOptionState, ownerState: AutocompleteOwnerState<...>) => ReactNode)"}},renderTags:{defaultValue:null,description:`Render the selected value when doing multiple selections.
@deprecated Use \`renderValue\` prop instead
@param value The \`value\` provided to the component.
@param getTagProps A tag props getter.
@param ownerState The state of the Autocomplete component.
@returns`,name:"renderTags",required:!1,type:{name:'((value: unknown[], getTagProps: AutocompleteRenderGetTagProps, ownerState: AutocompleteOwnerState<unknown, boolean, boolean, boolean | undefined, "div">) => ReactNode) | undefined'}},isOptionEqualToValue:{defaultValue:null,description:`Used to determine if the option represents the given value.
Uses strict equality by default.
⚠️ Both arguments need to be handled, an option can only match with one value.
@param option The option to test.
@param value The value to test against.
@returns`,name:"isOptionEqualToValue",required:!1,type:{name:"((option: unknown, value: unknown) => boolean)"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ chip?: SlotProps<ElementType<Partial<ChipProps<"div">>, keyof IntrinsicElements>, {}, AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, "div">>; ... 4 more ...; popupIndicator?: SlotProps<...>; } | undefined'}}}}}catch{}export{kt as A,In as E,xn as a,tn as c,en as u};
