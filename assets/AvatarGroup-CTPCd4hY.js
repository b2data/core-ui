import{r as l,u as D,j as T,c as S,F as M}from"./iframe-BjsjcTCH.js";import{s as V,c as R}from"./styled-B_VYI8z9.js";import{m as O}from"./memoTheme-BkiB6XT-.js";import{g as I}from"./generateUtilityClasses-DDbjFgb8.js";import{g as $}from"./generateUtilityClass-BtcU_pBl.js";import{u as j}from"./useSlot-_7UiI0BH.js";import{a as U,b as k}from"./Avatar-DR_cFGBx.js";function z(e){return $("MuiAvatarGroup",e)}const F=I("MuiAvatarGroup",["root","avatar"]),c={small:-16,medium:-8},Y=e=>{const{classes:r}=e;return R({root:["root"],avatar:["avatar"]},z,r)},Z=V("div",{name:"MuiAvatarGroup",slot:"Root",overridesResolver:(e,r)=>[{[`& .${F.avatar}`]:r.avatar},r.root]})(O(({theme:e})=>({display:"flex",flexDirection:"row-reverse",[`& .${k.root}`]:{border:`2px solid ${(e.vars||e).palette.background.default}`,boxSizing:"content-box",marginLeft:"var(--AvatarGroup-spacing, -8px)","&:last-child":{marginLeft:0}}}))),B=l.forwardRef(function(r,v){const f=D({props:r,name:"MuiAvatarGroup"}),{children:b,className:q,component:h="div",componentsProps:A,max:i=5,renderSurplus:g,slotProps:y={},slots:C={},spacing:E="medium",total:w,variant:p="circular",...x}=f;let t=i<2?2:i;const a={...f,max:i,spacing:E,component:h,variant:p},u=Y(a),m=l.Children.toArray(b).filter(s=>l.isValidElement(s)),o=w||m.length;o===t&&(t+=1),t=Math.min(o+1,t);const P=Math.min(m.length,t-1),d=Math.max(o-t,o-P,0),N=g?g(d):`+${d}`;let n;a.spacing&&c[a.spacing]!==void 0?n=c[a.spacing]:a.spacing===0?n=0:n=-a.spacing||c.medium;const L={slots:C,slotProps:{surplus:y.additionalAvatar??A?.additionalAvatar,...A,...y}},[H,_]=j("surplus",{elementType:U,externalForwardedProps:L,className:u.avatar,ownerState:a,additionalProps:{variant:p}});return T.jsxs(Z,{as:h,ownerState:a,className:S(u.root,q),ref:v,...x,style:{"--AvatarGroup-spacing":`${n}px`,...x.style},children:[d?T.jsx(H,{..._,children:N}):null,m.slice(0,P).reverse().map(s=>l.cloneElement(s,{className:S(s.props.className,u.avatar),variant:s.props.variant||p}))]})}),G=V(B)(({size:e="medium"})=>({"& .MuiAvatar-root":{width:M[e],height:M[e],fontSize:e==="small"?"1rem":"1.4rem"}}));try{G.displayName="AvatarGroup",G.__docgenInfo={description:"",displayName:"AvatarGroup",props:{children:{defaultValue:null,description:"The avatars to stack.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<AvatarGroupClasses>"}},component:{defaultValue:null,description:`The component used for the root node.
Either a string to use a HTML element or a component.`,name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},componentsProps:{defaultValue:null,description:"The extra props for the slot components.\nYou can override the existing props or add new ones.\n\nThis prop is an alias for the `slotProps` prop.\n@deprecated use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"componentsProps",required:!1,type:{name:'{ additionalAvatar?: (AvatarOwnProps & AvatarSlotsAndSlotProps & CommonProps & Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "className" | ... 11 more ... | "imgProps"> & AvatarGroupComponentsPropsOverrides); }'}},max:{defaultValue:{value:"5"},description:"Max avatars to show before +x.",name:"max",required:!1,type:{name:"number"}},renderSurplus:{defaultValue:null,description:`custom renderer of extraAvatars
@param surplus number of extra avatars
@returns custom element to display`,name:"renderSurplus",required:!1,type:{name:"((surplus: number) => ReactNode)"}},spacing:{defaultValue:{value:`'medium'
medium`},description:"Spacing between avatars.",name:"spacing",required:!1,type:{name:'number | "small" | "medium"'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},total:{defaultValue:{value:"children.length"},description:"The total number of avatars. Used for calculating the number of extra avatars.",name:"total",required:!1,type:{name:"number"}},variant:{defaultValue:{value:`'circular'
circular`},description:"The variant to use.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"square"'},{value:'"circular"'},{value:'"rounded"'}]}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<AvatarGroupSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ additionalAvatar?: (AvatarOwnProps & AvatarSlotsAndSlotProps & CommonProps & Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "className" | ... 11 more ... | "imgProps"> & AvatarGroupComponentsPropsOverrides); surplus?: SlotProps<...>; } | undefined'}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},size:{defaultValue:{value:"medium"},description:"The size of the avatar.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}}}}}catch{}export{G as A};
