import{R as m,j as e}from"./iframe-BjsjcTCH.js";import{b as p}from"./DatePicker-CqA02kX-.js";import{F as c}from"./FormHelperText-B6A-eWRO.js";import{B as l}from"./Box-DHB9hgUt.js";const i=m.forwardRef(function({format:o,helperText:t,wrapperProps:s,required:u,label:n,...a},d){return e.jsxs(l,{width:1,...s,children:[e.jsx(p,{ref:d,format:o||"HH:mm",ampm:!1,ampmInClock:!1,enableAccessibleFieldDOMStructure:!1,label:n?e.jsxs(e.Fragment,{children:[n,u&&e.jsx(l,{component:"span",sx:{color:"error.main"},children:" *"})]}):void 0,...a,slotProps:{openPickerButton:{size:"small"},actionBar:{actions:[]},...a.slotProps},sx:{...a.sx,".MuiButtonBase-root":{minWidth:"auto"}}}),t&&e.jsx(c,{error:a.error,children:t})]})});try{i.displayName="TimePicker",i.__docgenInfo={description:"",displayName:"TimePicker",props:{format:{defaultValue:{value:"HH:mm"},description:"Format of the date when rendered in the input(s).\nDefaults to localized format based on the used `views`.",name:"format",required:!1,type:{name:"string"}},error:{defaultValue:{value:"false"},description:"If `true`, the label is displayed in an error state.",name:"error",required:!1,type:{name:"boolean"}},helperText:{defaultValue:null,description:"The helper text content.",name:"helperText",required:!1,type:{name:"ReactNode"}},margin:{defaultValue:{value:"none"},description:"If `normal` will adjust vertical spacing of this and contained components.",name:"margin",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"dense"'},{value:'"normal"'}]}},wrapperProps:{defaultValue:null,description:"Wrapper props",name:"wrapperProps",required:!1,type:{name:"BoxProps"}},required:{defaultValue:{value:"false"},description:"If `true`, the asterics is displayed after label.",name:"required",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:`The default value.
Used when the component is not controlled.`,name:"defaultValue",required:!1,type:{name:"PickerValue"}},autoFocus:{defaultValue:null,description:"If `true`, the main element is focused during the first mount.\nThis main element is:\n- the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n- the `input` element if there is a field rendered.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.\n@template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n@template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n@param value The new value.\n@param context The context containing the validation result of the current value.",name:"onChange",required:!1,type:{name:"((value: PickerValue, context: PickerChangeHandlerContext<TimeValidationError>) => void)"}},onError:{defaultValue:null,description:"Callback fired when the error associated with the current value changes.\nWhen a validation error is detected, the `error` parameter contains a non-null value.\nThis can be used to render an appropriate form error.\n@template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n@template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n@param error The reason why the current value is not valid.\n@param value The value associated with the error.",name:"onError",required:!1,type:{name:"((error: TimeValidationError, value: PickerValue) => void)"}},onClose:{defaultValue:null,description:"Callback fired when the popup requests to be closed.\nUse in controlled mode (see `open`).",name:"onClose",required:!1,type:{name:"(() => void)"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},label:{defaultValue:null,description:"The label content.",name:"label",required:!1,type:{name:"ReactNode"}},view:{defaultValue:null,description:"The visible view.\nUsed when the component view is controlled.\nMust be a valid option from `views` list.",name:"view",required:!1,type:{name:"enum",value:[{value:'"hours"'},{value:'"minutes"'},{value:'"seconds"'},{value:'"meridiem"'}]}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.\nWhen disabled, the value cannot be changed and no interaction is possible.",name:"disabled",required:!1,type:{name:"boolean"}},onOpen:{defaultValue:null,description:"Callback fired when the popup requests to be opened.\nUse in controlled mode (see `open`).",name:"onOpen",required:!1,type:{name:"(() => void)"}},open:{defaultValue:{value:"false"},description:"Control the popup or dialog open state.",name:"open",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:{value:"false"},description:"If `true`, the component is read-only.\nWhen read-only, the value cannot be changed but the user can interact with the interface.",name:"readOnly",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The selected value.
Used when the component is controlled.`,name:"value",required:!1,type:{name:"PickerValue"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.",name:"slotProps",required:!1,type:{name:"TimePickerSlotProps<true>"}},name:{defaultValue:null,description:"Name attribute used by the `input` element in the Field.",name:"name",required:!1,type:{name:"string"}},orientation:{defaultValue:null,description:"Force rendering in particular orientation.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"portrait"'},{value:'"landscape"'}]}},disableFuture:{defaultValue:{value:"false"},description:"If `true`, disable values after the current date for date components, time for time components and both for date time components.",name:"disableFuture",required:!1,type:{name:"boolean"}},disablePast:{defaultValue:{value:"false"},description:"If `true`, disable values before the current date for date components, time for time components and both for date time components.",name:"disablePast",required:!1,type:{name:"boolean"}},minutesStep:{defaultValue:{value:"1"},description:"Step over minutes.",name:"minutesStep",required:!1,type:{name:"number"}},minTime:{defaultValue:null,description:"Minimal selectable time.\nThe date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.",name:"minTime",required:!1,type:{name:"Dayjs"}},maxTime:{defaultValue:null,description:"Maximal selectable time.\nThe date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.",name:"maxTime",required:!1,type:{name:"Dayjs"}},views:{defaultValue:null,description:"Available views.",name:"views",required:!1,type:{name:"readonly TimeView[]"}},openTo:{defaultValue:null,description:"The default visible view.\nUsed when the component view is not controlled.\nMust be a valid option from `views` list.",name:"openTo",required:!1,type:{name:"enum",value:[{value:'"hours"'},{value:'"minutes"'},{value:'"seconds"'},{value:'"meridiem"'}]}},onViewChange:{defaultValue:null,description:`Callback fired on view change.
@template TView
@param view The new view.`,name:"onViewChange",required:!1,type:{name:"((view: TimeViewWithMeridiem) => void)"}},localeText:{defaultValue:null,description:"Locale for components texts.\nAllows overriding texts coming from `LocalizationProvider` and `theme`.",name:"localeText",required:!1,type:{name:"PickersInputComponentLocaleText"}},onAccept:{defaultValue:null,description:"Callback fired when the value is accepted.\n@template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n@template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n@param value The value that was just accepted.\n@param context The context containing the validation result of the current value.",name:"onAccept",required:!1,type:{name:"((value: PickerValue, context: PickerChangeHandlerContext<TimeValidationError>) => void)"}},referenceDate:{defaultValue:{value:"The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`."},description:"The date used to generate the new value when both `value` and `defaultValue` are empty.",name:"referenceDate",required:!1,type:{name:"Dayjs"}},shouldDisableTime:{defaultValue:null,description:`Disable specific time.
@param value The value to check.
@param view The clock type of the timeValue.
@returns If \`true\` the time will be disabled.`,name:"shouldDisableTime",required:!1,type:{name:"((value: Dayjs, view: TimeView) => boolean)"}},disableIgnoringDatePartForTimeValidation:{defaultValue:{value:"false"},description:"Do not ignore date part when validating min/max time.",name:"disableIgnoringDatePartForTimeValidation",required:!1,type:{name:"boolean"}},ampm:{defaultValue:{value:"utils.is12HourCycleInCurrentLocale()"},description:"12h/24h view for hour selection clock.",name:"ampm",required:!1,type:{name:"boolean"}},skipDisabled:{defaultValue:{value:"false"},description:"If `true`, disabled digital clock items will not be rendered.",name:"skipDisabled",required:!1,type:{name:"boolean"}},timeSteps:{defaultValue:{value:"{ hours: 1, minutes: 5, seconds: 5 }"},description:"The time steps between two time unit options.\nFor example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\nWhen single column time renderer is used, only `timeStep.minutes` will be used.",name:"timeSteps",required:!1,type:{name:"TimeStepOptions"}},enableAccessibleFieldDOMStructure:{defaultValue:{value:"true"},description:"",name:"enableAccessibleFieldDOMStructure",required:!1,type:{name:"any"}},ampmInClock:{defaultValue:{value:"true on desktop, false on mobile"},description:"Display ampm controls under the clock (instead of in the toolbar).",name:"ampmInClock",required:!1,type:{name:"boolean"}},thresholdToRenderTimeInASingleColumn:{defaultValue:{value:"24"},description:"Amount of time options below or at which the single column time renderer is used.",name:"thresholdToRenderTimeInASingleColumn",required:!1,type:{name:"number"}},closeOnSelect:{defaultValue:{value:"false"},description:"If `true`, the Picker will close after submitting the full date.",name:"closeOnSelect",required:!1,type:{name:"boolean"}},disableOpenPicker:{defaultValue:{value:"false"},description:"If `true`, the button to open the Picker will not be rendered (it will only render the field).\n@deprecated Use the [field component](https://next.mui.com/x/react-date-pickers/fields/) instead.",name:"disableOpenPicker",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement>"}}}}}catch{}export{i as T};
